import random
from typing import List, Tuple, Set

class Game:
    def __init__(self, player1: int, player2: int):
        self.player1 = player1
        self.player2 = player2
        self.current_turn = player1
        self.player1_board = self.create_empty_board()
        self.player2_board = self.create_empty_board()
        self.player1_shots: Set[Tuple[int, int]] = set()
        self.player2_shots: Set[Tuple[int, int]] = set()
        self.setup_ships()

    @staticmethod
    def create_empty_board() -> List[List[str]]:
        return [["üåä" for _ in range(10)] for _ in range(10)]

    def setup_ships(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª"""
        ships_layout = [
            (4, 1),  # 1 –∫–æ—Ä–∞–±–ª—å –Ω–∞ 4 –∫–ª–µ—Ç–∫–∏
            (3, 2),  # 2 –∫–æ—Ä–∞–±–ª—è –Ω–∞ 3 –∫–ª–µ—Ç–∫–∏
            (2, 3),  # 3 –∫–æ—Ä–∞–±–ª—è –Ω–∞ 2 –∫–ª–µ—Ç–∫–∏
            (1, 4)   # 4 –∫–æ—Ä–∞–±–ª—è –Ω–∞ 1 –∫–ª–µ—Ç–∫—É
        ]
        
        for board in [self.player1_board, self.player2_board]:
            for ship_length, ship_count in ships_layout:
                for _ in range(ship_count):
                    self.place_ship(board, ship_length)

    def place_ship(self, board: List[List[str]], ship_length: int):
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–∞ –¥–æ—Å–∫–µ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª"""
        max_attempts = 100
        for _ in range(max_attempts):
            x = random.randint(0, 9)
            y = random.randint(0, 9)
            orientation = random.choice(["horizontal", "vertical"])
            
            if self.can_place_ship(board, x, y, ship_length, orientation):
                # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª—å
                for i in range(ship_length):
                    if orientation == "horizontal":
                        board[y][x + i] = "üö§Ô∏è"
                    else:
                        board[y + i][x] = "üö§Ô∏è"
                return
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ max_attempts –ø–æ–ø—ã—Ç–æ–∫
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –¥–ª–∏–Ω–æ–π {ship_length}")

    def can_place_ship(self, board: List[List[str]], x: int, y: int, length: int, orientation: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if orientation == "horizontal":
            if x + length > 10:
                return False
        else:
            if y + length > 10:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ —Å–≤–æ–±–æ–¥–Ω—ã –∏ –≤–æ–∫—Ä—É–≥ –Ω–∏—Ö —Ç–æ–∂–µ
        for i in range(length):
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è
            cx = x + (i if orientation == "horizontal" else 0)
            cy = y + (i if orientation == "vertical" else 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—É –∫–ª–µ—Ç–∫—É –∏ –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    nx, ny = cx + dx, cy + dy
                    if 0 <= nx < 10 and 0 <= ny < 10:
                        if board[ny][nx] != "üåä":
                            return False
        return True

    def check_win(self, board: List[List[str]]) -> bool:
        return all(cell != "üö§Ô∏è" for row in board for cell in row)
