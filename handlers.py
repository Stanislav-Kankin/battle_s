from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from models import Game
from config import bot
import keyboards as kb

router = Router()
active_games = {}  # {chat_id: {"status": str, "player1": int, "player2": int, "game": Game}}

# ======================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ======================
async def show_board(chat_id: int, board: list, is_hidden: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—Å–∫—É —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    for y in range(10):
        for x in range(10):
            cell = board[y][x]
            if is_hidden and cell == "üõ≥Ô∏è":
                display = "üåä"
            else:
                display = cell
                
            builder.button(
                text=display,
                callback_data=f"shoot_{x}_{y}"
            )
    builder.adjust(10)  # 10 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
    
    board_text = "  0 1 2 3 4 5 6 7 8 9\n"
    for y in range(10):
        board_text += f"{y} " + " ".join([cell if not is_hidden or cell in ("üí•", "‚ùå") else "üåä" for cell in board[y]]) + "\n"
    
    await bot.send_message(
        chat_id,
        f"<pre>{board_text}</pre>",
        reply_markup=builder.as_markup()
    )

# ======================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ======================
@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üö¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ—Ä—Å–∫–æ–π –±–æ–π!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/play - —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É\n"
        "/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ",
        reply_markup=kb.get_main_menu()
    )

@router.message(Command("play"))
async def play(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ
    for game_data in active_games.values():
        if user_id in (game_data.get("player1"), game_data.get("player2")):
            await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ!")
            return
    
    if chat_id in active_games:
        await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!")
        return
    
    active_games[chat_id] = {
        "status": "waiting",
        "player1": user_id,
        "player2": None
    }
    await message.answer(
        "–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...\n"
        "–ü—É—Å—Ç—å –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–∞–ø–∏—à–µ—Ç /join",
        reply_markup=kb.get_main_menu()
    )

@router.message(Command("join"))
async def join_game(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if chat_id not in active_games:
        await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∏–≥—Ä –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!")
        return
    
    game_data = active_games[chat_id]
    
    if game_data["status"] != "waiting":
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
        return
    
    if user_id == game_data["player1"]:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π!")
        return
    
    game_data["player2"] = user_id
    game_data["status"] = "playing"
    game_data["game"] = Game(game_data["player1"], user_id)
    
    await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –î–µ–ª–∞–π—Ç–µ —Ö–æ–¥—ã, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–ª–µ—Ç–∫–∏.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å–∫–∏
    game = game_data["game"]
    await show_board(chat_id, game.player1_board, is_hidden=False)  # –°–≤–æ—è –¥–æ—Å–∫–∞
    await show_board(chat_id, game.player2_board, is_hidden=True)   # –î–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

# ======================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
# ======================
@router.callback_query(F.data.startswith("shoot_"))
async def process_shoot(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    
    if chat_id not in active_games or active_games[chat_id]["status"] != "playing":
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!", show_alert=True)
        return
    
    game_data = active_games[chat_id]
    game = game_data["game"]
    
    if user_id not in (game.player1, game.player2):
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã!", show_alert=True)
        return
    
    if user_id != game.current_turn:
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    _, x, y = callback.data.split("_")
    x, y = int(x), int(y)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –¥–æ—Å–∫—É —Å—Ç—Ä–µ–ª—è–µ–º
    if user_id == game.player1:
        target_board = game.player2_board
        shots = game.player1_shots
    else:
        target_board = game.player1_board
        shots = game.player2_shots
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å—é–¥–∞
    if (x, y) in shots:
        await callback.answer("–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞!", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Å—Ç—Ä–µ–ª
    shots.add((x, y))
    if target_board[y][x] == "üõ≥Ô∏è":
        target_board[y][x] = "üí•"
        await callback.answer("–ü–æ–ø–∞–¥–∞–Ω–∏–µ! üî•")
    else:
        target_board[y][x] = "‚ùå"
        await callback.answer("–ú–∏–º–æ! üåä")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if game.check_win(target_board):
        winner_name = callback.from_user.first_name
        await callback.message.answer(f"üéâ {winner_name} –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!")
        del active_games[chat_id]
        return
    
    # –ú–µ–Ω—è–µ–º —Ö–æ–¥
    game.current_turn = game.player2 if user_id == game.player1 else game.player1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å–∫–æ–π
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardBuilder().as_markup()
    )
    await show_board(chat_id, target_board, is_hidden=(user_id == game.player1))