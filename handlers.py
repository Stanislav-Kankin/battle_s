from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import Command

from models import Game
from config import bot

router = Router()
waiting_games = {}  # {player1_id: {"chat_id": chat_id}}
active_games = {}   # {game_id: {"player1": id, "player2": id, "game": Game}}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—É–∫–≤ —Ü–∏—Ñ—Ä–∞–º (–∞=0, –±=1, ...)
LETTERS = ['–∞', '–±', '–≤', '–≥', '–¥', '–µ', '–∂', '–∑', '–∏', '–∫']

# ======================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ======================
def format_board(board: list, hide_ships: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ—Å–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥"""
    header = "  " + " ".join(str(i) for i in range(10)) + "\n"
    board_text = header
    
    for y in range(10):
        row = [LETTERS[y]]  # –ë—É–∫–≤–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏
        for x in range(10):
            cell = board[y][x]
            if hide_ships and cell == "üõ≥Ô∏è":
                row.append("üåä")
            else:
                row.append(cell)
        board_text += " ".join(row) + "\n"
    
    return f"<pre>{board_text}</pre>"

async def send_boards(chat_id: int, game: Game, is_player1: bool):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–µ –¥–æ—Å–∫–∏ –∏–≥—Ä–æ–∫—É"""
    # –°–≤–æ—è –¥–æ—Å–∫–∞ (–ø–æ–ª–Ω–∞—è)
    my_board = game.player1_board if is_player1 else game.player2_board
    await bot.send_message(chat_id, "‚öì –í–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏:\n" + format_board(my_board))
    
    # –î–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (—Å–∫—Ä—ã—Ç–∞—è)
    enemy_board = game.player2_board if is_player1 else game.player1_board
    await bot.send_message(chat_id, "üéØ –î–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n" + format_board(enemy_board, hide_ships=True))
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –≤–≤–æ–¥—É
    await bot.send_message(
        chat_id,
        "–í–∞—à —Ö–æ–¥! –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–±—É–∫–≤–∞ —Ü–∏—Ñ—Ä–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∞ 1' –∏–ª–∏ '–≤ 5')"
    )

def check_ship_sunk(board: list, x: int, y: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω –∫–æ—Ä–∞–±–ª—å"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–µ—Å—å –∫–æ—Ä–∞–±–ª—å
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    ship_cells = []
    to_check = [(x, y)]
    
    while to_check:
        cx, cy = to_check.pop()
        if (cx, cy) in ship_cells:
            continue
        ship_cells.append((cx, cy))
        
        for dx, dy in directions:
            nx, ny = cx + dx, cy + dy
            if 0 <= nx < 10 and 0 <= ny < 10:
                if board[ny][nx] in ("üõ≥Ô∏è", "üí•") and (nx, ny) not in ship_cells:
                    to_check.append((nx, ny))
    
    # –ï—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–æ–¥–±–∏—Ç—ã
    return all(board[cy][cx] == "üí•" for cx, cy in ship_cells)

# ======================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ======================
@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üö¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ—Ä—Å–∫–æ–π –±–æ–π!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/play - —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É\n"
        "/join <ID> - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n\n"
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "1. –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /play\n"
        "2. –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /join <ID>\n"
        "3. –ü–æ –æ—á–µ—Ä–µ–¥–∏ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∞ 1' –∏–ª–∏ '–≤ 5')\n"
        "4. –ü—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ —Ö–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è, –ø—Ä–∏ –ø—Ä–æ–º–∞—Ö–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç"
    )

@router.message(Command("play"))
async def play(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    if user_id in waiting_games or any(user_id in (g["player1"], g["player2"]) for g in active_games.values()):
        await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ!")
        return
    
    waiting_games[user_id] = {"chat_id": chat_id}
    await message.answer(
        f"–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –í–∞—à ID –∏–≥—Ä—ã: <code>{user_id}</code>\n\n"
        "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç ID –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n"
        f"/join {user_id}"
    )

@router.message(Command("join"))
async def join_game(message: Message):
    try:
        game_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /join <ID_–∏–≥—Ä—ã>")
        return
    
    if game_id not in waiting_games:
        await message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
        return
    
    player1_id = game_id
    player2_id = message.from_user.id
    player1_chat = waiting_games[game_id]["chat_id"]
    player2_chat = message.chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    game = Game(player1_id, player2_id)
    game_id = f"{player1_id}_{player2_id}"
    active_games[game_id] = {
        "player1": player1_id,
        "player2": player2_id,
        "player1_chat": player1_chat,
        "player2_chat": player2_chat,
        "game": game
    }
    
    del waiting_games[player1_id]
    
    # –û–ø–æ–≤–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    await bot.send_message(
        player1_chat,
        f"–ò–≥—Ä–æ–∫ {message.from_user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!\n"
        "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. –í–∞—à —Ö–æ–¥ –ø–µ—Ä–≤—ã–π."
    )
    await message.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å–∫–∏
    await send_boards(player1_chat, game, is_player1=True)

# ======================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ö–æ–¥–æ–≤
# ======================
@router.message(F.text.regexp(r'^[–∞-–∏–∫–ê-–ò–ö]\s*[0-9]$'))
async def process_shot(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game_data = None
    for gid, data in active_games.items():
        if user_id in (data["player1"], data["player2"]):
            game_data = data
            game_id = gid
            break
    
    if not game_data:
        await message.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ! –°–æ–∑–¥–∞–π—Ç–µ /play –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å /join")
        return
    
    game = game_data["game"]
    
    if user_id != game.current_turn:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø—Ä–∏–≤–æ–¥–∏–º –±—É–∫–≤—É –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    letter_part, num_part = message.text.lower().split()
    y = LETTERS.index(letter_part[0])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ —Å–ª—É—á–∞–π –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    x = int(num_part)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if not (0 <= x <= 9) or not (0 <= y <= 9):
        await message.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã –∞-–∏ –∏ —Ü–∏—Ñ—Ä—ã 0-9")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—Å—Ç—Ä–µ–ª–∞
    if user_id == game.player1:
        target_board = game.player2_board
        shots = game.player1_shots
        opponent_chat = game_data["player2_chat"]
        opponent_id = game_data["player2"]
    else:
        target_board = game.player1_board
        shots = game.player2_shots
        opponent_chat = game_data["player1_chat"]
        opponent_id = game_data["player1"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª
    if (x, y) in shots:
        await message.answer("–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞!")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Å—Ç—Ä–µ–ª
    shots.add((x, y))
    if target_board[y][x] == "üõ≥Ô∏è":
        target_board[y][x] = "üí•"
        result = "–ü–æ–ø–∞–¥–∞–Ω–∏–µ! üî•"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–±–∏—Ç –ª–∏ –∫–æ—Ä–∞–±–ª—å
        if check_ship_sunk(target_board, x, y):
            result += "\n–ö–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω! üíÄ"
        
        # –•–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        keep_turn = True
    else:
        target_board[y][x] = "‚ùå"
        result = "–ú–∏–º–æ! üåä"
        # –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
        keep_turn = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if game.check_win(target_board):
        winner_name = message.from_user.first_name
        await bot.send_message(
            game_data["player1_chat"],
            f"üéâ {winner_name} –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!"
        )
        await bot.send_message(
            game_data["player2_chat"],
            f"üéâ {winner_name} –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!"
        )
        del active_games[game_id]
        return
    
    # –ú–µ–Ω—è–µ–º —Ö–æ–¥ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if not keep_turn:
        game.current_turn = opponent_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    await send_boards(chat_id, game, is_player1=(user_id == game.player1))
    await send_boards(opponent_chat, game, is_player1=(opponent_id == game.player1))
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    await message.answer(result)
    
    if not keep_turn:
        await bot.send_message(
            opponent_chat,
            f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥: {message.text}\n{result}\n–¢–µ–ø–µ—Ä—å –≤–∞—à —Ö–æ–¥!"
        )
    else:
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–∞—à —Ö–æ–¥!")